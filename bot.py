import os
import re
import time
import logging
import threading
import requests
from bs4 import BeautifulSoup
import telebot
from flask import Flask
from datetime import datetime
from urllib.parse import urljoin
import json

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ê–ô–¢–ê ================== #
SCHOOL_SITE = "https://soundmusic54.ru"
PAGES = {
    "main": SCHOOL_SITE,
    "production": urljoin(SCHOOL_SITE, "production"),
    "fingerstyle": urljoin(SCHOOL_SITE, "fingerstyle"),
    "electricguitar": urljoin(SCHOOL_SITE, "electricguitar"),
    "shop": urljoin(SCHOOL_SITE, "shop"),
    "top": urljoin(SCHOOL_SITE, "top"),
    "way": urljoin(SCHOOL_SITE, "way"),
    "plan": urljoin(SCHOOL_SITE, "plan"),
    "faq": urljoin(SCHOOL_SITE, "faq")
}

# ================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ================== #
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('guitar_bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger('GuitarSchoolBot')
logger.setLevel(logging.DEBUG if os.getenv('DEBUG') else logging.INFO)

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ================== #
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    logger.critical("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–µ–Ω!")
    raise EnvironmentError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

bot = telebot.TeleBot(BOT_TOKEN, threaded=True, num_threads=4)
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–Ω–∞–Ω–∏–π –æ —à–∫–æ–ª–µ
school_knowledge = {}
lock = threading.Lock()

# ================== –ü–ê–†–°–ò–ù–ì –°–ê–ô–¢–ê ================== #
def parse_page_content(soup, url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    content = {}
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    content['title'] = soup.title.string.strip() if soup.title else url
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    main_content = soup.find('main') or soup.find('article') or soup.body
    if main_content:
        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for element in main_content(['script', 'style', 'footer', 'header', 'nav', 'form']):
            element.decompose()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content['text'] = main_content.get_text(separator='\n', strip=True)
        content['text'] = re.sub(r'\n{3,}', '\n\n', content['text'])
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–µ–∫—Ü–∏–π
    sections = {}
    headers = main_content.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
    for header in headers:
        section_title = header.get_text().strip()
        section_content = []
        next_element = header.next_sibling
        
        while next_element and next_element.name not in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:
            if next_element.name and next_element.get_text().strip():
                section_content.append(next_element.get_text().strip())
            next_element = next_element.next_sibling
        
        sections[section_title] = '\n'.join(section_content)
    
    content['sections'] = sections
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contacts = {}
    phone_pattern = re.compile(r'\+?[78]\s?\(?\d{3}\)?\s?\d{3}[\s-]?\d{2}[\s-]?\d{2}')
    address_pattern = re.compile(r'–≥\.\s*[–ê-–Ø–∞-—è]+\s*,\s*—É–ª\.\s*[–ê-–Ø–∞-—è]+\s*,\s*\d+')
    
    for text in [content.get('text', '')] + list(sections.values()):
        phones = phone_pattern.findall(text)
        addresses = address_pattern.findall(text)
        
        if phones:
            contacts['phones'] = list(set(phones))
        if addresses:
            contacts['addresses'] = list(set(addresses))
    
    if contacts:
        content['contacts'] = contacts
    
    return content

def load_school_knowledge():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞"""
    logger.info("üé∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π –æ –≥–∏—Ç–∞—Ä–Ω–æ–π —à–∫–æ–ª–µ...")
    knowledge = {}
    
    for page_name, url in PAGES.items():
        try:
            response = requests.get(url, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            page_content = parse_page_content(soup, url)
            page_content['url'] = url
            knowledge[page_name] = page_content
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {page_name} - {page_content['title']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {str(e)}")
            knowledge[page_name] = {
                'url': url,
                'title': page_name,
                'text': f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ—Å–µ—Ç–∏—Ç–µ: {url}"
            }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    with open('school_knowledge.json', 'w', encoding='utf-8') as f:
        json.dump(knowledge, f, ensure_ascii=False, indent=2)
    
    return knowledge

def find_relevant_sections(query, knowledge_data):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    query_lower = query.lower()
    results = []
    
    for page_name, page_data in knowledge_data.items():
        # –ü–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        for section_title, section_content in page_data.get('sections', {}).items():
            if query_lower in section_title.lower():
                results.append({
                    'source': page_data['title'],
                    'url': page_data['url'],
                    'title': section_title,
                    'content': section_content[:1000] + '...' if len(section_content) > 1000 else section_content
                })
        
        # –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if 'text' in page_data and query_lower in page_data['text'].lower():
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏—è
            start_idx = page_data['text'].lower().find(query_lower)
            if start_idx != -1:
                end_idx = min(len(page_data['text']), start_idx + 500)
                snippet = page_data['text'][max(0, start_idx-100):end_idx]
                
                results.append({
                    'source': page_data['title'],
                    'url': page_data['url'],
                    'title': "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    'content': snippet + '...'
                })
    
    return results[:3]  # –ù–µ –±–æ–ª–µ–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

def get_contacts_info(knowledge_data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
    contacts = {'phones': set(), 'addresses': set()}
    
    for page_data in knowledge_data.values():
        if 'contacts' in page_data:
            if 'phones' in page_data['contacts']:
                contacts['phones'].update(page_data['contacts']['phones'])
            if 'addresses' in page_data['contacts']:
                contacts['addresses'].update(page_data['contacts']['addresses'])
    
    return {
        'phones': list(contacts['phones']),
        'addresses': list(contacts['addresses'])
    }

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í ================== #
def generate_answer(query, knowledge_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞"""
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    query_lower = query.lower()
    
    if any(word in query_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ç–∞—Ä–∏—Ñ', '–æ–ø–ª–∞—Ç']):
        price_info = find_relevant_sections("—Å—Ç–æ–∏–º–æ—Å—Ç—å", knowledge_data)
        if price_info:
            response = "üé∏ *–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è*\n\n"
            for info in price_info:
                response += f"üîπ *{info['title']}*\n{info['content']}\n\n"
            response += f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {price_info[0]['url']}"
            return response
    
    if any(word in query_lower for word in ['–∑–∞–ø–∏—Å', '–∫–æ–Ω—Ç–∞–∫—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∞–¥—Ä–µ—Å']):
        contacts = get_contacts_info(knowledge_data)
        response = "üìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
        
        if contacts['phones']:
            response += "‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω—ã:*\n" + "\n".join(contacts['phones']) + "\n\n"
        if contacts['addresses']:
            response += "üìç *–ê–¥—Ä–µ—Å–∞:*\n" + "\n".join(contacts['addresses']) + "\n\n"
        
        response += "üíª *–°–∞–π—Ç:* " + SCHOOL_SITE
        return response
    
    if any(word in query_lower for word in ['–∫—É—Ä—Å', '–ø—Ä–æ–≥—Ä–∞–º–º', '–æ–±—É—á–µ–Ω', '–∑–∞–Ω—è—Ç']):
        program_info = find_relevant_sections("–ø—Ä–æ–≥—Ä–∞–º–º", knowledge_data)
        if program_info:
            response = "üéµ *–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è*\n\n"
            for info in program_info:
                response += f"üéØ *{info['title']}*\n{info['content']}\n\n"
            response += f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {program_info[0]['url']}"
            return response
    
    # –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É
    relevant_sections = find_relevant_sections(query, knowledge_data)
    if relevant_sections:
        response = "üîç *–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:*\n\n"
        for i, section in enumerate(relevant_sections):
            response += f"{i+1}. *{section['title']}* ({section['source']})\n"
            response += f"{section['content']}\n"
            response += f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({section['url']})\n\n"
        return response
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return (
        "üé∏ *SoundMusic54 - —ç–∫—Å–ø—Ä–µ—Å—Å-—à–∫–æ–ª–∞ –∏–≥—Ä—ã –Ω–∞ –≥–∏—Ç–∞—Ä–µ*\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç:\n"
        f"{SCHOOL_SITE}\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n"
        f"- [–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è]({PAGES['production']})\n"
        f"- [–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã]({PAGES['faq']})"
    )

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ================== #
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–∏—Ç–∞—Ä–Ω–æ–π —à–∫–æ–ª–µ"""
    welcome_msg = (
        "üéµ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SoundMusic54!*\n\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≥–∏—Ç–∞—Ä–Ω–æ–π —à–∫–æ–ª—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n"
        "üîπ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: —Å–ø—Ä–æ—Å–∏—Ç–µ '—Ü–µ–Ω—ã' –∏–ª–∏ '—Å—Ç–æ–∏–º–æ—Å—Ç—å'\n"
        "üîπ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã: —Å–ø—Ä–æ—Å–∏—Ç–µ '–ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è'\n"
        "üîπ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ: —Å–ø—Ä–æ—Å–∏—Ç–µ '–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?'\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —à–∫–æ–ª–µ, –≥–∏—Ç–∞—Ä–µ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–∏!\n\n"
        f"–ù–∞—à —Å–∞–π—Ç: [{SCHOOL_SITE}]({SCHOOL_SITE})"
    )
    
    try:
        bot.send_message(
            message.chat.id,
            welcome_msg,
            parse_mode="Markdown",
            disable_web_page_preview=False
        )
    except Exception:
        bot.send_message(message.chat.id, welcome_msg)

@bot.message_handler(func=lambda m: True)
def handle_guitar_question(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≥–∏—Ç–∞—Ä–Ω–æ–π —à–∫–æ–ª–µ"""
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç"
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
        with lock:
            response = generate_answer(message.text, school_knowledge)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.send_message(
            message.chat.id,
            response,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞")
        bot.send_message(
            message.chat.id,
            "üé∏ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –≥–∏—Ç–∞—Ä–Ω–æ–π —à–∫–æ–ª–µ SoundMusic54.\n"
            "–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"- –ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç: {SCHOOL_SITE}\n"
            f"- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å FAQ: {PAGES['faq']}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ!"
        )

# ================== –°–ï–†–í–ò–°–ù–´–ï –§–£–ù–ö–¶–ò–ò ================== #
def refresh_knowledge_periodically():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞–Ω–∏—è –æ —à–∫–æ–ª–µ"""
    while True:
        time.sleep(24 * 3600)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
        try:
            with lock:
                global school_knowledge
                school_knowledge = load_school_knowledge()
            logger.info("üîÑ –ó–Ω–∞–Ω–∏—è –æ —à–∫–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {str(e)}")

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    pages_loaded = len(school_knowledge) if school_knowledge else 0
    return {
        "status": "OK",
        "school": "SoundMusic54",
        "pages_loaded": pages_loaded,
        "last_update": datetime.utcnow().isoformat()
    }, 200

# ================== –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ ================== #
def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∑–Ω–∞–Ω–∏–π –æ —à–∫–æ–ª–µ"""
    logger.info("üé∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏—Ç–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π –æ —à–∫–æ–ª–µ
    global school_knowledge
    school_knowledge = load_school_knowledge()
    
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π
    threading.Thread(target=refresh_knowledge_periodically, daemon=True).start()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contacts = get_contacts_info(school_knowledge)
    logger.info(f"üìû –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}")
    
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == '__main__':
    initialize_bot()
    
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(
        target=lambda: app.run(host='0.0.0.0', port=8080, debug=False, use_reloader=False),
        daemon=True
    )
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    bot.infinity_polling()
