import os
import threading
import time
import re
import requests
from bs4 import BeautifulSoup
import telebot

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî‚Äî‚Äî
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
if not TELEGRAM_BOT_TOKEN or not OPENROUTER_API_KEY:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENROUTER_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
bot.remove_webhook()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ polling

# –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –∏—Ö —è–∫–æ—Ä–µ–π –¥–ª—è —Å—Å—ã–ª–æ–∫
PAGES = {
    "base":       "https://soundmusic54.ru",
    "production": "https://soundmusic54.ru/production",
    "fingerstyle":"https://soundmusic54.ru/fingerstyle",
    "electric":   "https://soundmusic54.ru/electricguitar",
    "shop":       "https://soundmusic54.ru/shop",
    "top":        "https://soundmusic54.ru/top",
    "way":        "https://soundmusic54.ru/way",
    "plan":       "https://soundmusic54.ru/plan",
    "faq":        "https://soundmusic54.ru/faq",
}

ANCHORS = {
    "price":    ("–¶–µ–Ω—ã",       "https://soundmusic54.ru/#price"),
    "feedback": ("–û—Ç–∑—ã–≤—ã",     "https://soundmusic54.ru/#feedback"),
    "sign":     ("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "https://soundmusic54.ru/#sign"),
    "menu":     ("–û —à–∫–æ–ª–µ",    "https://soundmusic54.ru/#menu"),
    "video":    ("–í–∏–¥–µ–æ",      "https://soundmusic54.ru/#video"),
    "links":    ("–ö–æ–Ω—Ç–∞–∫—Ç—ã",   "https://soundmusic54.ru/#links"),
}

# –ö–∞–∫ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–∞–ø—è—Ç—Å—è –Ω–∞ —è–∫–æ—Ä—å
KEYWORD_TO_ANCHOR = {
    "—Ü–µ–Ω–∞":    "price",
    "—Å—Ç–æ–∏–º–æ—Å—Ç—å":"price",
    "–æ—Ç–∑—ã–≤—ã":  "feedback",
    "–≤–∏–¥–µ–æ":   "video",
    "–∑–∞–ø–∏—Å":   "sign",
    "–ø—Ä–æ–±–Ω":   "sign",
    "—à–∫–æ–ª":    "menu",
    "–∫–æ–Ω—Ç–∞–∫—Ç": "links",
}

# –†–µ–≥—ç–∫—Å–ø—ã
MD_CLEAN_RE = re.compile(r'<br\s*/?>', re.IGNORECASE)
CYRILLIC_LINE = re.compile(r'[\u0400-\u04FF]')  # —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ö–æ—Ç—è –±—ã 1 –∫–∏—Ä–∏–ª–ª–∏—Ü—É

site_contents = {}  # —Å—é–¥–∞ –±—É–¥–µ–º –∫–ª–∞—Å—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞


def fetch_and_clean(url: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏."""
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        lines = soup.get_text(separator="\n").splitlines()
        clean = [ln.strip() for ln in lines if CYRILLIC_LINE.search(ln)]
        return "\n".join(clean)
    except Exception:
        return ""


def load_site():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç site_contents –¥–ª—è –≤—Å–µ—Ö PAGES."""
    for key, url in PAGES.items():
        txt = fetch_and_clean(url)
        # —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å prompt
        site_contents[key] = txt[:2000]


def background_refresher():
    """–ü–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∞–π—Ç —Ä–∞–∑ –≤ —á–∞—Å."""
    while True:
        print("‚öôÔ∏è –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∞–π—Ç–∞...")
        load_site()
        time.sleep(3600)


def fetch_site_summary() -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–≤–æ–¥–∫—É –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤."""
    parts = []
    for key in ("base", "faq", "plan", "way"):
        text = site_contents.get(key, "")
        if text:
            parts.append(f"–†–∞–∑–¥–µ–ª {key}:\n{text}")
    return "\n\n".join(parts)


def ask_model(question: str, summary: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å fallback‚Äë–ª–æ–≥–∏–∫–æ–π."""
    sys_prompt = (
        "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã SoundMusic. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. "
        "–ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç ‚Äî —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º.\n\n"
        f"{summary}"
    )
    payload = {
        "messages": [
            {"role": "system", "content": sys_prompt},
            {"role": "user",   "content": question}
        ],
        "max_tokens": 700,
        "temperature": 0.3,
    }
    models = [
        "tngtech/deepseek-r1t2-chimera:free",
        "mistralai/mistral-7b-instruct:free"
    ]
    for m in models:
        try:
            payload["model"] = m
            r = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                },
                json=payload,
                timeout=15
            )
            if r.status_code == 200:
                data = r.json()
                msg = data.get("choices", [{}])[0].get("message", {}).get("content", "")
                if msg:
                    return msg.strip()
        except Exception:
            pass
    return "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –≤—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–Ω—è—Ç—ã ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def clean_markdown(text: str) -> str:
    text = MD_CLEAN_RE.sub("\n", text)
    return text.replace("__", "*").replace("**", "*").strip()


def find_anchor(question: str) -> str:
    q = question.lower()
    for kw, anchor in KEYWORD_TO_ANCHOR.items():
        if kw in q:
            return anchor
    return ""


# ‚Äî‚Äî‚Äî Telegram handlers ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî


@bot.message_handler(commands=['start', 'help'])
def send_welcome(msg):
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üéì –û —à–∫–æ–ª–µ", "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üí∞ –¶–µ–Ω—ã")
    bot.send_message(
        msg.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ SoundMusic ‚Äî –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=kb
    )


@bot.message_handler(func=lambda m: True)
def handle_message(message):
    q = message.text.strip()
    if not q:
        return bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.")

    bot.send_chat_action(message.chat.id, 'typing')
    summary = fetch_site_summary()
    ans = ask_model(q, summary)
    ans = clean_markdown(ans)

    # –î–æ–±–∞–≤–ª—è–µ–º —è–∫–æ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    akey = find_anchor(q)
    if akey in ANCHORS:
        title, url = ANCHORS[akey]
        ans += f"\n\n*–ü–æ–¥—Ä–æ–±–Ω–µ–µ:* [{title}]({url})"

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 4096
    for i in range(0, len(ans), 4096):
        bot.send_message(
            message.chat.id,
            ans[i:i+4096],
            parse_mode="Markdown"
        )


if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–∞–π—Ç
    load_site()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–π –ø–æ—Ç–æ–∫
    threading.Thread(target=background_refresher, daemon=True).start()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º.")
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π polling —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    bot.infinity_polling(skip_pending=True)
