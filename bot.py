import os
import telebot
from telebot import types
import requests

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY:
    raise ValueError("‚ùå TELEGRAM_TOKEN –∏–ª–∏ OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã!")

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üéì –û —à–∫–æ–ª–µ", "üí∞ –¶–µ–Ω—ã")
    markup.row("üìù –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "ü•á –£—Ä–æ–≤–Ω–∏ —É—á–µ–Ω–∏–∫–æ–≤")
    markup.row("üéØ –¶–µ–ª–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä —ç–∫—Å–ø—Ä–µ—Å—Å-—à–∫–æ–ª—ã –≥–∏—Ç–∞—Ä—ã SOUNDMUSIC.\n\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç:",
        reply_markup=main_menu()
    )

def ask_gpt(question):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YourBotUsername",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
        "Content-Type": "application/json"
    }
    data = {
        "model": "openai/gpt-4",
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî —á–µ—Å—Ç–Ω—ã–π, —Ç—ë–ø–ª—ã–π –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã –≥–∏—Ç–∞—Ä—ã SoundMusic –∏–∑ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."},
            {"role": "user", "content": question}
        ]
    }
    response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        print("–û—à–∏–±–∫–∞ OpenRouter:", response.text)
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter."

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.strip()

    if text == "üéì –û —à–∫–æ–ª–µ":
        bot.send_message(message.chat.id, "üéì –ú—ã ‚Äî —ç–∫—Å–ø—Ä–µ—Å—Å-—à–∫–æ–ª–∞ –≥–∏—Ç–∞—Ä—ã soundmusic, –æ–±—É—á–∞–µ–º —Å –Ω—É–ª—è –∏ –Ω–µ —Ç–æ–ª—å–∫–æ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://soundmusic54.ru/#menu")
    elif text == "üí∞ –¶–µ–Ω—ã":
        bot.send_message(message.chat.id, "üí∞ –¶–µ–Ω—ã: https://soundmusic54.ru/#price")
    elif text == "üìù –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è":
        bot.send_message(message.chat.id, "üìù –ó–∞–ø–∏—à–∏—Å—å –Ω–∞ —Å–∞–π—Ç–µ:\nhttps://soundmusic54.ru/#sign\n–ò–ª–∏ –ø–∏—à–∏ —Å—é–¥–∞.")
    elif text == "ü•á –£—Ä–æ–≤–Ω–∏ —É—á–µ–Ω–∏–∫–æ–≤":
        bot.send_message(message.chat.id, "ü•á –£—á–∏–º –∏ –Ω–æ–≤–∏—á–∫–æ–≤, –∏ –ø—Ä–æ—Ñ–∏: https://soundmusic54.ru/top")
    elif text == "üéØ –¶–µ–ª–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
        bot.send_message(message.chat.id, "üéØ –î–æ—Å—Ç–∏–≥–∞–µ–º —Ü–µ–ª–∏ –≤–º–µ—Å—Ç–µ: https://soundmusic54.ru/production")
    else:
        try:
            bot.send_chat_action(message.chat.id, 'typing')
            reply = ask_gpt(text)
            bot.send_message(message.chat.id, reply)
        except Exception as e:
            print("–û—à–∏–±–∫–∞:", e)
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling()
