import os
import requests
from bs4 import BeautifulSoup
import telebot
import re

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî‚Äî‚Äî
TELEGRAM_BOT_TOKEN   = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY   = os.getenv("OPENROUTER_API_KEY")
CONTENT_API_URL      = os.getenv("CONTENT_API_URL", "http://api:5000/content")
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –Ø–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
ANCHORS = {
    "menu":     ("–û —à–∫–æ–ª–µ",         "https://soundmusic54.ru/#menu"),
    "sign":     ("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", "https://soundmusic54.ru/#sign"),
    "feedback": ("–û—Ç–∑—ã–≤—ã",          "https://soundmusic54.ru/#feedback"),
    "video":    ("–í–∏–¥–µ–æ —É—á–µ–Ω–∏–∫–æ–≤",  "https://soundmusic54.ru/#video"),
    "price":    ("–¶–µ–Ω—ã",            "https://soundmusic54.ru/#price"),
    "links":    ("–ö–æ–Ω—Ç–∞–∫—Ç—ã",        "https://soundmusic54.ru/#links"),
}

# –§—Ä–∞–∑—ã-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
KEYWORD_TO_ANCHOR = {
    "—Ü–µ–Ω–∞":    "price",
    "—Å—Ç–æ–∏–º–æ—Å—Ç—å":"price",
    "–æ—Ç–∑—ã–≤—ã":  "feedback",
    "–≤–∏–¥–µ–æ":   "video",
    "–∑–∞–ø–∏—Å":   "sign",     # –∑–∞–ø–∏—Å—å, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –∑–∞—è–≤–∫–∞
    "–ø—Ä–æ–±–Ω":   "sign",     # –ø—Ä–æ–±–Ω—ã–π, –ø—Ä–æ–±–Ω–∞—è
    "—à–∫–æ–ª":    "menu",     # —à–∫–æ–ª–∞, –æ —à–∫–æ–ª–µ
    "–∫–æ–Ω—Ç–∞–∫—Ç": "links",    # –∫–æ–Ω—Ç–∞–∫—Ç—ã
}

# –†–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è Markdown-–æ—á–∏—Å—Ç–∫–∏
MD_CLEAN_RE = re.compile(r'<br\s*/?>', re.IGNORECASE)

# ‚Äî‚Äî‚Äî –ü–æ–º–æ—â–Ω–∏–∫–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def fetch_site_summary():
    """–ó–∞–ø—Ä–æ—Å –∫ API-—Å–µ—Ä–≤–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–∞–π—Ç–∞."""
    try:
        r = requests.get(CONTENT_API_URL, timeout=5)
        r.raise_for_status()
        return r.json().get("content", "")
    except Exception:
        return ""

def ask_model(question: str, site_summary: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenRouter –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    system_prompt = (
        "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã SoundMusic. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞. "
        "–ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç ‚Äî —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        f"{site_summary[:2000]}"
    )

    payload = {
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user",   "content": question}
        ],
        "max_tokens": 800,
        "temperature": 0.3,
    }

    for model in (
        "tngtech/deepseek-r1t2-chimera:free",
        "mistralai/mistral-7b-instruct:free"
    ):
        payload["model"] = model
        try:
            r = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                },
                json=payload,
                timeout=15
            )
            if r.status_code == 200:
                data = r.json()
                content = data["choices"][0]["message"]["content"].strip()
                if content:
                    return content
        except Exception:
            pass
    return "‚ö†Ô∏è –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def clean_markdown(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ Markdown-ish HTML-—Ç–µ–≥–æ–≤ –∏ –ø–æ–¥—á–∏—Å—Ç–∫–∞ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π."""
    text = MD_CLEAN_RE.sub("\n", text)
    return text.replace("__", "*").replace("**", "*")

def find_anchor(question: str) -> str:
    """–ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –≤–æ–ø—Ä–æ—Å–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∫–æ—Ä—å –∏–ª–∏ –ø—É—Å—Ç–æ."""
    q = question.lower()
    for kw, anchor in KEYWORD_TO_ANCHOR.items():
        if kw in q:
            return anchor
    return ""

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

@bot.message_handler(commands=['start', 'help'])
def send_welcome(msg):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üéì –û —à–∫–æ–ª–µ", "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üí∞ –¶–µ–Ω—ã")
    msg = bot.send_message(
        msg.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ SoundMusic. –°–ø—Ä–æ—Å–∏ –ø—Ä–æ –∑–∞–Ω—è—Ç–∏—è, —Ü–µ–Ω—ã –∏–ª–∏ –æ—Å—Ç–∞–≤—å –∑–∞—è–≤–∫—É.",
        reply_markup=keyboard
    )

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    question = message.text.strip()
    if not question:
        return bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.")

    bot.send_chat_action(message.chat.id, 'typing')

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∞–π—Ç–∞
    summary = fetch_site_summary()

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI
    answer = ask_model(question, summary)
    answer = clean_markdown(answer)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Å—ã–ª–∫—É
    anchor_key = find_anchor(question)
    if anchor_key and anchor_key in ANCHORS:
        title, url = ANCHORS[anchor_key]
        answer += f"\n\n*–ü–æ–¥—Ä–æ–±–Ω–µ–µ:* [{title}]({url})"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    for i in range(0, len(answer), 4096):
        bot.send_message(
            message.chat.id,
            answer[i:i+4096],
            parse_mode="Markdown"
        )

# ‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

if __name__ == "__main__":
    bot.infinity_polling()
