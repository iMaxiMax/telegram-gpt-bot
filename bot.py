import os
import requests
from bs4 import BeautifulSoup
import telebot
import re
import time

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

HEADERS = {
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) "
                   "Chrome/115.0 Safari/537.36")
}

BASE_URL = "https://soundmusic54.ru"
PATHS = [
    "", "production", "fingerstyle", "electricguitar",
    "shop", "top", "way", "plan", "faq"
]

site_contents = {}

def fetch_page(url):
    try:
        resp = requests.get(url, headers=HEADERS)
        resp.raise_for_status()
        return resp.text
    except requests.HTTPError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
        return None

def load_site():
    print("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞...")
    for path in PATHS:
        url = f"{BASE_URL}/{path}" if path else BASE_URL
        print(f"–ó–∞–≥—Ä—É–∂–∞—é {url}...")
        html = fetch_page(url)
        if html:
            soup = BeautifulSoup(html, "html.parser")
            text = soup.get_text(separator="\n", strip=True)
            site_contents[path or "base"] = text
        else:
            site_contents[path or "base"] = ""
    print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def ask_deepseek(question: str, use_site_context=True) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    if use_site_context:
        site_summary = "\n\n".join(
            f"–†–∞–∑–¥–µ–ª '{key}': {val[:800]}"
            for key, val in site_contents.items()
        )
        system_prompt = (
            "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SoundMusic. "
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Ç–æ–ª—å–∫–æ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞ soundmusic54.ru. "
            "–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ.\n"
            f"–í–æ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞:\n{site_summary}"
        )
    else:
        # –°–≤–æ–±–æ–¥–Ω—ã–π, —Ä–∞—Å–∫—Ä–µ–ø–æ—â—ë–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≥—Ä—É–ø–ø–µ, –º–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        system_prompt = (
            "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —Ä–∞—Å–∫—Ä–µ–ø–æ—â—ë–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SoundMusic, "
            "–æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–≤–æ–±–æ–¥–Ω–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."
        )

    payload = {
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ],
        "max_tokens": 600,
        "temperature": 0.7
    }

    try:
        resp = requests.post(url, headers=headers, json=payload)
        resp.raise_for_status()
        data = resp.json()
        answer = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        return answer or "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞."
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter:", str(e))
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

def format_bold_markdown(text: str) -> str:
    text = text.replace("__", "**")
    text = re.sub(r'<br\s*/?>', '\n', text, flags=re.IGNORECASE)
    return text

def send_long_message(chat_id, text, reply_to_message_id=None):
    max_len = 4096
    parts = []

    lines = text.split('\n')
    current_part = ""
    for line in lines:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ
        if len(current_part) + len(line) + 1 > max_len:
            parts.append(current_part)
            current_part = line + '\n'
        else:
            current_part += line + '\n'
    if current_part:
        parts.append(current_part)

    for part in parts:
        if reply_to_message_id:
            bot.send_message(chat_id, part, parse_mode="Markdown", reply_to_message_id=reply_to_message_id)
        else:
            bot.send_message(chat_id, part, parse_mode="Markdown")
        time.sleep(0.4)  # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º–∞

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ SoundMusic. "
        "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∫—É—Ä—Å—ã, –æ–±—É—á–µ–Ω–∏–µ –∏ –≤—Å—ë, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Å–∞–π—Ç–æ–º soundmusic54.ru."
    )
    bot.send_message(message.chat.id, welcome_text)

@bot.message_handler(func=lambda m: m.chat.type == 'private')
def handle_private_message(message):
    question = message.text.strip()
    if not question:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.")
        return
    bot.send_chat_action(message.chat.id, 'typing')
    answer = ask_deepseek(question, use_site_context=True)
    safe_answer = format_bold_markdown(answer)
    send_long_message(message.chat.id, safe_answer)

@bot.message_handler(func=lambda message: message.chat.type in ['group', 'supergroup'])
def handle_group_message(message):
    bot_username = bot.get_me().username
    if f"@{bot_username}" in message.text:
        question = message.text.replace(f"@{bot_username}", "").strip()
        if question:
            bot.send_chat_action(message.chat.id, 'typing')
            answer = ask_deepseek(question, use_site_context=False)
            safe_answer = format_bold_markdown(answer)
            send_long_message(message.chat.id, safe_answer, reply_to_message_id=message.message_id)

if __name__ == "__main__":
    load_site()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
