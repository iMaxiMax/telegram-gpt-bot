import os
import requests
from bs4 import BeautifulSoup
import telebot

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

HEADERS = {
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) "
                   "Chrome/115.0 Safari/537.36")
}

BASE_URL = "https://soundmusic54.ru"
PATHS = [
    "",              # –æ—Å–Ω–æ–≤–∞
    "production",
    "fingerstyle",
    "electricguitar",
    "shop",
    "top",
    "way",
    "plan",
    "faq"
]

site_contents = {}

def fetch_page(url):
    try:
        resp = requests.get(url, headers=HEADERS)
        resp.raise_for_status()
        return resp.text
    except requests.HTTPError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
        return None

def load_site():
    print("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞...")
    for path in PATHS:
        url = f"{BASE_URL}/{path}" if path else BASE_URL
        print(f"–ó–∞–≥—Ä—É–∂–∞—é {url}...")
        html = fetch_page(url)
        if html:
            soup = BeautifulSoup(html, "html.parser")
            text = soup.get_text(separator="\n", strip=True)
            site_contents[path or "base"] = text
        else:
            site_contents[path or "base"] = ""
    print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def sanitize_markdown(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ª–æ–º–∞—Ç—å Markdown –≤ Telegram (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    for ch in escape_chars:
        text = text.replace(ch, f"\\{ch}")
    return text

def ask_deepseek(question: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    site_summary = "\n\n".join(
        f"–†–∞–∑–¥–µ–ª '{key}': {val[:800]}"
        for key, val in site_contents.items()
    )

    payload = {
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SoundMusic, "
                    "–∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤, "
                    "–Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –ª–∏—à–Ω–µ–≥–æ, –æ—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ.\n"
                    f"–í–æ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞:\n{site_summary}"
                )
            },
            {
                "role": "user",
                "content": question
            }
        ],
        "max_tokens": 300,
        "temperature": 0.7
    }

    try:
        resp = requests.post(url, headers=headers, json=payload)
        resp.raise_for_status()
        data = resp.json()
        answer = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        if not answer:
            return "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞."
        # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ç.–∫. —É –Ω–∞—Å –µ—Å—Ç—å Markdown-—Ä–∞–∑–º–µ—Ç–∫–∞ —Å **
        return answer
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter:", str(e))
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ SoundMusic. "
        "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∫—É—Ä—Å—ã, –æ–±—É—á–µ–Ω–∏–µ –∏ –≤—Å—ë, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Å–∞–π—Ç–æ–º soundmusic54.ru."
    )
    bot.send_message(message.chat.id, welcome_text, parse_mode="Markdown")

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    question = message.text.strip()
    if not question:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.", parse_mode="Markdown")
        return
    bot.send_chat_action(message.chat.id, 'typing')
    answer = ask_deepseek(question)
    max_len = 4096
    for i in range(0, len(answer), max_len):
        bot.send_message(message.chat.id, answer[i:i+max_len], parse_mode="Markdown")

if __name__ == "__main__":
    load_site()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
