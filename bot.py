import os
import re
import time
import random
import logging
import threading
import requests
from bs4 import BeautifulSoup
import telebot
from flask import Flask, request
from datetime import datetime
from urllib.parse import urljoin
import json

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ê–ô–¢–ê ================== #
SCHOOL_SITE = "https://soundmusic54.ru"
PAGES = {
    "main": SCHOOL_SITE,
    "production": urljoin(SCHOOL_SITE, "production"),
    "fingerstyle": urljoin(SCHOOL_SITE, "fingerstyle"),
    "electricguitar": urljoin(SCHOOL_SITE, "electricguitar"),
    "shop": urljoin(SCHOOL_SITE, "shop"),
    "top": urljoin(SCHOOL_SITE, "top"),
    "way": urljoin(SCHOOL_SITE, "way"),
    "plan": urljoin(SCHOOL_SITE, "plan"),
    "faq": urljoin(SCHOOL_SITE, "faq")
}

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    'Connection': 'keep-alive',
}

# ================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ================== #
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('guitar_bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger('SoundMusic54Bot')
logger.setLevel(logging.DEBUG if os.getenv('DEBUG', 'false').lower() == 'true' else logging.INFO)

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ================== #
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    logger.critical("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–µ–Ω!")
    raise EnvironmentError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–Ω–∞–Ω–∏–π –æ —à–∫–æ–ª–µ
school_knowledge = {}
lock = threading.Lock()

# ================== –ü–ê–†–°–ò–ù–ì –°–ê–ô–¢–ê ================== #
def parse_page_content(soup, url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    content = {}
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    content['title'] = soup.title.string.strip() if soup.title else url
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    main_content = soup.find('main') or soup.find('article') or soup.body
    if main_content:
        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for element in main_content(['script', 'style', 'footer', 'header', 'nav']):
            element.decompose()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content['text'] = main_content.get_text(separator='\n', strip=True)
        content['text'] = re.sub(r'\n{3,}', '\n\n', content['text'])
    
    return content

def load_school_knowledge():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞"""
    logger.info("üé∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π –æ –≥–∏—Ç–∞—Ä–Ω–æ–π —à–∫–æ–ª–µ...")
    knowledge = {}
    session = requests.Session()
    
    for page_name, url in PAGES.items():
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(random.uniform(1.0, 2.5))
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ User-Agent
            headers = HEADERS.copy()
            headers['User-Agent'] = random.choice([
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
                'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36'
            ])
            
            response = session.get(url, headers=headers, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            page_content = parse_page_content(soup, url)
            page_content['url'] = url
            knowledge[page_name] = page_content
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {page_name} - {page_content['title']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {str(e)}")
            knowledge[page_name] = {
                'url': url,
                'title': page_name,
                'text': f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ—Å–µ—Ç–∏—Ç–µ: {url}"
            }
    
    return knowledge

def find_relevant_info(query, knowledge_data):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    query_lower = query.lower()
    results = []
    
    for page_name, page_data in knowledge_data.items():
        # –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if 'text' in page_data and query_lower in page_data['text'].lower():
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏—è
            start_idx = page_data['text'].lower().find(query_lower)
            if start_idx != -1:
                end_idx = min(len(page_data['text']), start_idx + 300)
                snippet = page_data['text'][max(0, start_idx-100):end_idx]
                
                results.append({
                    'source': page_data['title'],
                    'url': page_data['url'],
                    'content': snippet + '...'
                })
    
    return results[:2]  # –ù–µ –±–æ–ª–µ–µ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í ================== #
def generate_answer(query, knowledge_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞"""
    # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    relevant_info = find_relevant_info(query, knowledge_data)
    
    if relevant_info:
        response = "üîç *–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:*\n\n"
        for i, info in enumerate(relevant_info):
            response += f"{i+1}. [{info['source']}]({info['url']})\n"
            response += f"{info['content']}\n\n"
        return response
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return (
        "üé∏ *SoundMusic54 - —ç–∫—Å–ø—Ä–µ—Å—Å-—à–∫–æ–ª–∞ –∏–≥—Ä—ã –Ω–∞ –≥–∏—Ç–∞—Ä–µ*\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç:\n"
        f"{SCHOOL_SITE}\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n"
        f"- [–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞]({PAGES['main']})\n"
        f"- [–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã]({PAGES['faq']})"
    )

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ================== #
@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –≥–∏—Ç–∞—Ä–Ω–æ–π —à–∫–æ–ª—ã SoundMusic54 –∞–∫—Ç–∏–≤–µ–Ω"

@app.route('/health')
def health_check():
    return json.dumps({
        "status": "OK",
        "pages_loaded": len(school_knowledge),
        "timestamp": datetime.now().isoformat()
    }), 200

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_msg = (
        "üéµ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SoundMusic54!*\n\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≥–∏—Ç–∞—Ä–Ω–æ–π —à–∫–æ–ª—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n"
        "üîπ –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∫–æ–ª–µ\n"
        "üîπ –£—Ç–æ—á–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±—É—á–µ–Ω–∏—è\n\n"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —à–∫–æ–ª–µ –∏–ª–∏ –≥–∏—Ç–∞—Ä–µ!\n\n"
        f"–ù–∞—à —Å–∞–π—Ç: [{SCHOOL_SITE}]({SCHOOL_SITE})"
    )
    
    bot.send_message(
        message.chat.id,
        welcome_msg,
        parse_mode="Markdown",
        disable_web_page_preview=False
    )

@bot.message_handler(func=lambda m: True)
def handle_question(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
        with lock:
            response = generate_answer(message.text, school_knowledge)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.send_message(
            message.chat.id,
            response,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞")
        bot.send_message(
            message.chat.id,
            "üé∏ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç:\n"
            f"{SCHOOL_SITE}"
        )

# ================== –í–ï–ë–•–£–ö–ò ================== #
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    return 'Invalid content type', 403

# ================== –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ ================== #
def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    logger.info("üé∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏—Ç–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π –æ —à–∫–æ–ª–µ
    global school_knowledge
    school_knowledge = load_school_knowledge()
    
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–µ–Ω –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway
        DOMAIN = os.getenv('RAILWAY_PUBLIC_DOMAIN', '')
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if not DOMAIN:
            DOMAIN = os.getenv('RAILWAY_STATIC_URL', '').replace('https://', '')
        
        if not DOMAIN:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è Railway
            if 'RAILWAY_ENVIRONMENT' in os.environ:
                project_name = os.getenv('RAILWAY_PROJECT_NAME')
                service_name = os.getenv('RAILWAY_SERVICE_NAME')
                if project_name and service_name:
                    DOMAIN = f'{project_name}-{service_name}.up.railway.app'
        
        if DOMAIN:
            WEBHOOK_URL = f'https://{DOMAIN}/webhook'
            logger.info(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
            
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=WEBHOOK_URL)
            return True
        
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞")
        return False
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return False

if __name__ == '__main__':
    initialize_bot()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    if not setup_webhook():
        logger.error("‚ö†Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ polling")
        bot.polling(none_stop=True, skip_pending=True)
    else:
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    app.run(host='0.0.0.0', port=8080, debug=False)
