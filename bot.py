import os
import threading
import time
import requests
from bs4 import BeautifulSoup
import telebot
import re
from flask import Flask, request
from telebot.apihelper import ApiTelegramException
from telebot import formatting

# ================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ================== #
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–µ–Ω!")
    
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# ================== Markdown Helpers ================== #
def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{"".join(re.escape(c) for c in escape_chars)}])', r'\\\1', text)

def safe_markdown(text: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ Markdown-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    patterns = {
        'bold': r'\*\*(.+?)\*\*',
        'italic': r'\*(.+?)\*',
        'code': r'`(.+?)`'
    }
    
    replacements = {}
    for key, pattern in patterns.items():
        for i, match in enumerate(re.finditer(pattern, text)):
            placeholder = f'__{key}_{i}__'
            replacements[placeholder] = match.group(0)
            text = text.replace(match.group(0), placeholder)
    
    text = escape_markdown_v2(text)
    
    for placeholder, original in replacements.items():
        text = text.replace(placeholder, original)
    
    return text

# ================== Message Splitting ================== #
def split_message(text: str, limit=4096) -> list:
    """–£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ç–∫–∏"""
    if len(text) <= limit:
        return [text]
    
    # –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º Markdown (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ)
    # ... [–≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞] ...
    
    return parts  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π

# ================== DeepSeek Integration ================== #
def ask_deepseek(question: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ DeepSeek API"""
    # ... [–≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è] ...
    return response_text

# ================== Telegram Handlers ================== #
@bot.message_handler(func=lambda m: True)
def handle_msg(m):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # ... [—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫] ...

# ================== Web Server ================== #
@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! /health –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"

@app.route('/health')
def health_check():
    return "OK", 200

# ================== Startup ================== #
def run_bot():
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    bot.infinity_polling()

def run_flask():
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(host='0.0.0.0', port=8080)

if __name__ == '__main__':
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    threading.Thread(target=run_bot, daemon=True).start()
    threading.Thread(target=run_flask, daemon=True).start()
    
    # –í–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    while True:
        time.sleep(3600)
