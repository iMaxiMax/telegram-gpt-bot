import os
import requests
from bs4 import BeautifulSoup
import telebot
import re
from flask import Flask, request

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ü—Ä–∏–º–µ—Ä: https://your-bot.up.railway.app

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
app = Flask(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–∞ ---
BASE_URL = "https://soundmusic54.ru"
PATHS = ["", "production", "fingerstyle", "electricguitar", "shop", "top", "way", "plan", "faq"]
site_contents = {}

def fetch_page(url):
    try:
        resp = requests.get(url, headers={"User-Agent": "Mozilla"})
        resp.raise_for_status()
        return resp.text
    except requests.HTTPError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
        return None

def load_site():
    print("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞...")
    for path in PATHS:
        url = f"{BASE_URL}/{path}" if path else BASE_URL
        print(f"–ó–∞–≥—Ä—É–∂–∞—é {url}...")
        html = fetch_page(url)
        if html:
            soup = BeautifulSoup(html, "html.parser")
            text = soup.get_text(separator="\n", strip=True)
            site_contents[path or "base"] = text
        else:
            site_contents[path or "base"] = ""
    print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# --- –†–∞–±–æ—Ç–∞ —Å OpenRouter ---
def ask_deepseek(question: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    important_sections = ["base", "faq", "plan", "way"]
    site_summary = "\n\n".join(
        f"–†–∞–∑–¥–µ–ª '{key}': {val[:800]}"
        for key, val in site_contents.items() if key in important_sections
    )
    system_prompt = (
        "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã SoundMusic. "
        "–û—Ç–≤–µ—á–∞–π –ø–æ —Ç–µ–º–µ —Å–∞–π—Ç–∞. –ï—Å–ª–∏ –∏–Ω—Ñ—ã –Ω–µ—Ç ‚Äî —Å–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç.\n"
        f"–í–æ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞:\n{site_summary}"
    )
    payload = {
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ],
        "max_tokens": 1000,
        "temperature": 0.7
    }
    try:
        resp = requests.post(url, headers=headers, json=payload)
        resp.raise_for_status()
        data = resp.json()
        return data.get("choices", [{}])[0].get("message", {}).get("content", "").strip() or "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter:", str(e))
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# --- –ü–æ–º–æ—â–Ω–∏–∫ Telegram ---
def format_bold_markdown(text: str) -> str:
    text = text.replace("__", "*").replace("**", "*")
    text = re.sub(r'<br\s*/?>', '\n', text, flags=re.IGNORECASE)
    return text

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã SoundMusic. "
        "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –æ–±—É—á–µ–Ω–∏–µ –∏ —Å–∞–π—Ç soundmusic54.ru.")

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    question = message.text.strip()
    if not question:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.")
        return
    bot.send_chat_action(message.chat.id, 'typing')
    answer = ask_deepseek(question)
    for i in range(0, len(answer), 4096):
        bot.send_message(message.chat.id, format_bold_markdown(answer[i:i+4096]), parse_mode="Markdown")

# --- Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    load_site()

    # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π webhook –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤—ã–π
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{TELEGRAM_BOT_TOKEN}")
    print(f"üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/{TELEGRAM_BOT_TOKEN}")

    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
