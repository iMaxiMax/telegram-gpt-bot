import os
import requests
from bs4 import BeautifulSoup
import telebot
import json
import re

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

HEADERS = {
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) "
                   "Chrome/115.0 Safari/537.36")
}

BASE_URL = "https://soundmusic54.ru"
PATHS = [
    "",              # –æ—Å–Ω–æ–≤–∞
    "production",    # –ø—Ä–æ–¥–∞–∫—à–Ω
    "fingerstyle",   # —Ñ–∏–Ω–≥–µ—Ä—Å—Ç–∞–π–ª
    "electricguitar",# —ç–ª–µ–∫—Ç—Ä—É—Ö–∞
    "shop",          # –º–∞–≥–∞–∑–∏–Ω —Å—à–∞
    "top",           # —Ä–µ–π—Ç–∏–Ω–≥ —É—á–µ–Ω–∏–∫–æ–≤
    "way",           # –¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
    "plan",          # —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—É—á–µ–Ω–∏—è
    "faq"            # FAQ
]

site_contents = {}

def fetch_page(url):
    try:
        resp = requests.get(url, headers=HEADERS)
        resp.raise_for_status()
        return resp.text
    except requests.HTTPError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
        return None

def load_site():
    print("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞...")
    for path in PATHS:
        url = f"{BASE_URL}/{path}" if path else BASE_URL
        print(f"–ó–∞–≥—Ä—É–∂–∞—é {url}...")
        html = fetch_page(url)
        if html:
            soup = BeautifulSoup(html, "html.parser")
            text = soup.get_text(separator="\n", strip=True)
            site_contents[path or "base"] = text
        else:
            site_contents[path or "base"] = ""
    print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def ask_deepseek(question: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    site_summary = "\n\n".join(
        f"–†–∞–∑–¥–µ–ª '{key}': {val[:800]}"
        for key, val in site_contents.items()
    )

    system_prompt = (
        "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SoundMusic, "
        "–∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤, "
        "–Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –ª–∏—à–Ω–µ–≥–æ, –æ—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ.\n"
        f"–í–æ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞:\n{site_summary}"
    )

    payload = {
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ],
        "max_tokens": 300,
        "temperature": 0.7
    }

    try:
        resp = requests.post(url, headers=headers, json=payload)
        resp.raise_for_status()
        data = resp.json()
        answer = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        return answer or "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞."
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter:", str(e))
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

def escape_markdown(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2 Telegram, —á—Ç–æ–±—ã –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    # Telegram MarkdownV2 —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å _ * [ ] ( ) ~ ` > # + - = | { } . !
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def format_bold_markdown(text: str) -> str:
    # –ó–∞–º–µ–Ω—è–µ–º __—Ç–µ–∫—Å—Ç__ –Ω–∞ *—Ç–µ–∫—Å—Ç* –∏ –ø–æ—Ç–æ–º —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –∑–≤–µ–∑–¥–æ—á–µ–∫
    # –î–ª—è MarkdownV2 –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî **—Ç–µ–∫—Å—Ç**
    # –ù–æ –µ—Å–ª–∏ –º—ã –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî Telegram –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É
    # –õ–æ–≥–∏–∫–∞:
    # 1) –∑–∞–º–µ–Ω–∏–º __—Ç–µ–∫—Å—Ç__ –Ω–∞ **—Ç–µ–∫—Å—Ç**
    # 2) –ø–æ—Ç–æ–º —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –∑–≤–µ–∑–¥–æ—á–µ–∫ –≤–Ω—É—Ç—Ä–∏ ** **
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è:
    # - –∑–∞–º–µ–Ω–∏–º __—Ç–µ–∫—Å—Ç__ –Ω–∞ **—Ç–µ–∫—Å—Ç**
    # - —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—ë –∫—Ä–æ–º–µ –∑–≤–µ–∑–¥–æ—á–µ–∫ (—Ç.–µ. –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∞–º–∏ **)
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω–∞ __—Ç–µ–∫—Å—Ç__ –Ω–∞ **—Ç–µ–∫—Å—Ç**
    text = re.sub(r'__(.+?)__', r'**\1**', text)

    # –†–∞–∑–æ–±—å—ë–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫—É—Å–∫–∏ –º–µ–∂–¥—É ** (–∂–∏—Ä–Ω—ã–º) –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
    parts = re.split(r'(\*\*.*?\*\*)', text)
    result = []
    for part in parts:
        if part.startswith("**") and part.endswith("**"):
            # –≤–Ω—É—Ç—Ä–∏ –∂–∏—Ä–Ω–æ–≥–æ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏, –Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
            inner = part[2:-2]
            inner_escaped = escape_markdown(inner)
            result.append(f"**{inner_escaped}**")
        else:
            # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            result.append(escape_markdown(part))
    return "".join(result)

def send_long_message(bot, chat_id, text, parse_mode=None):
    max_len = 4000
    for i in range(0, len(text), max_len):
        bot.send_message(chat_id, text[i:i+max_len], parse_mode=parse_mode)

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ SoundMusic. "
        "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∫—É—Ä—Å—ã, –æ–±—É—á–µ–Ω–∏–µ –∏ –≤—Å—ë, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Å–∞–π—Ç–æ–º soundmusic54.ru."
    )
    bot.send_message(message.chat.id, welcome_text)

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    question = message.text.strip()
    if not question:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.")
        return
    bot.send_chat_action(message.chat.id, 'typing')
    answer = ask_deepseek(question)
    safe_answer = format_bold_markdown(answer)
    send_long_message(bot, message.chat.id, safe_answer, parse_mode="MarkdownV2")

if __name__ == "__main__":
    load_site()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
