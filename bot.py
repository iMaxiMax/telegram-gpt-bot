import os
import requests
from bs4 import BeautifulSoup
import telebot
import time

# --- –ö–æ–Ω—Ñ–∏–≥–∏ ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENROUTER_API_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENROUTER_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# --- –°—Å—ã–ª–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
URLS = {
    "–æ—Å–Ω–æ–≤–∞": "https://soundmusic54.ru",
    "–ø—Ä–æ–¥–∞–∫—à–Ω": "https://soundmusic54.ru/production",
    "—Ñ–∏–Ω–≥–µ—Ä—Å—Ç–∞–π–ª": "https://soundmusic54.ru/fingerstyle",
    "—ç–ª–µ–∫—Ç—Ä—É—Ö–∞": "https://soundmusic54.ru/electricguitar",
    "–º–∞–≥–∞–∑–∏–Ω": "https://soundmusic54.ru/shop",
    "—Ä–µ–π—Ç–∏–Ω–≥": "https://soundmusic54.ru/top",
    "–¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞": "https://soundmusic54.ru/way",
    "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è": "https://soundmusic54.ru/plan",
    "faq": "https://soundmusic54.ru/faq",
}

def get_page_text(url):
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        main_content = soup.find("main") or soup.find("article") or soup.find("div", class_="content") or soup.body
        if main_content:
            return main_content.get_text(separator="\n", strip=True)
        else:
            return ""
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
        return ""

print("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞...")
site_texts = {}
for name, url in URLS.items():
    print(f"–ó–∞–≥—Ä—É–∂–∞—é {name}...")
    site_texts[name] = get_page_text(url)
    time.sleep(1)  # –ß—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–∞–π—Ç

print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def search_in_site(question, site_texts):
    question_words = set(word.lower() for word in question.split() if len(word) > 3)
    best_match = ""
    max_hits = 0
    for section, text in site_texts.items():
        hits = sum(word in text.lower() for word in question_words)
        if hits > max_hits and hits > 0:
            max_hits = hits
            best_match = text
    if best_match:
        return best_match[:1500]
    else:
        return ""

def ask_gpt_with_context(question, context_text):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }

    messages = [
        {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —á–µ—Å—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SoundMusic. –û—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ."}
    ]

    if context_text:
        messages.append({"role": "system", "content": f"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–∞–π—Ç–∞ SoundMusic:\n{context_text}"})

    messages.append({"role": "user", "content": question})

    payload = {
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "messages": messages,
        "max_tokens": 400,
        "temperature": 0.7
    }

    try:
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=15
        )
        if response.ok:
            data = response.json()
            return data.get("choices", [{}])[0].get("message", {}).get("content", "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ OpenRouter:", response.status_code, response.text)
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    except Exception as e:
        print("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter:", str(e))
        return "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    question = message.text
    print(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {question}")
    context = search_in_site(question, site_texts)
    answer = ask_gpt_with_context(question, context)
    bot.send_message(message.chat.id, answer)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
